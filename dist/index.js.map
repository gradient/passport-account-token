{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Strategy as BaseStrategy } from 'passport-strategy';\nimport * as express from 'express';\nimport {\n  StrategyOptions,\n  VerifyAction,\n  VerifyActionWithReq,\n  VerifyCallback\n} from './definitions';\n\nconst NAME = 'personal-token';\n\nexport class Strategy extends BaseStrategy {\n  public name: string;\n\n  private headerKey: string;\n  private headerPrefix: string;\n  private urlParamKey: string;\n  private passReqToCallback: boolean;\n\n  private verify: VerifyAction;\n  private verifyWithReq: VerifyActionWithReq;\n\n  constructor(\n    options: StrategyOptions,\n    verify: VerifyAction | VerifyActionWithReq\n  ) {\n    if (!verify) {\n      throw new Error('Token strategy requires a verify function');\n    }\n\n    if (!options.headerKey) {\n      throw new Error('Token strategy requires a header key option');\n    }\n\n    super();\n\n    this.name = NAME;\n\n    this.headerKey = options.headerKey.toLowerCase();\n    this.headerPrefix = options.headerPrefix;\n    this.urlParamKey = options.urlParamKey;\n\n    this.passReqToCallback = options.passReqToCallback;\n\n    if (verify.length === 2) {\n      this.verify = verify as VerifyAction;\n    } else {\n      this.verifyWithReq = verify as VerifyActionWithReq;\n    }\n  }\n\n  public authenticate(req: express.Request): void {\n    const self = this;\n\n    let token: string;\n\n    const extractedHeader: string = req.headers[this.headerKey] as string;\n    if (extractedHeader) {\n      const prefixRegex = new RegExp('^' + this.headerPrefix, 'i');\n\n      if (this.headerPrefix && extractedHeader.match(prefixRegex)) {\n        token = extractedHeader.replace(prefixRegex, '').trim();\n      } else {\n        token = extractedHeader;\n      }\n    }\n\n    // Header takes priority\n    if (!token && this.urlParamKey) {\n      token = req.params[this.urlParamKey];\n    }\n\n    const verified: VerifyCallback = (err: Error, user: any) => {\n      if (err) {\n        return self.error(err);\n      }\n\n      if (!user) {\n        // TODO: fill out challenge with a message\n        return self.fail('', 401);\n      }\n\n      // TODO: update passport-strategy types to make info optional\n      // and fail challenge / status should be optional\n      self.success(user, {});\n    };\n\n    if (token) {\n      if (this.passReqToCallback) {\n        this.verifyWithReq(req, token, verified);\n      } else {\n        this.verify(token, verified);\n      }\n    } else {\n      // TODO: fill out challenge with a message\n      this.fail('', 401);\n    }\n  }\n}\n"],"sourceRoot":"/Users/elliotblackburn/code/passport-account-token/src"}